AWSTemplateFormatVersion: 2010-09-09
Description: "Cloud Formation script to create EMR Cluster with SSM role"
Parameters:
  VPCCidr:
    Type: String
    Default: 10.10.0.0/16
  Subnet1Cidr:
    Type: String
    Default: 10.10.10.0/24
  Subnet2Cidr:
    Type: String
    Default: 10.10.20.0/24
  EMRInstanceType:
    Type: String
    Default: m5.xlarge
  EC2InstanceType:
    Type: String
    Default: t2.micro
  ReleaseLabel:
    Type: String
    Default: emr-5.33.0
  TerminationProtected:
    Type: String
    Default: false
  EMRPrincipal:
    Type: String
    Default: elasticmapreduce.amazonaws.com
  Ec2Principal:
    Type: String
    Default: ec2.amazonaws.com
  VLSDate:
    Type: String
    Default: 21JUN21
  EC2Name:
    Type: String
    Default: "Local Producer"
  LatestAMIId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: VLS
          Value: !Ref VLSDate
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: VLS
          Value: !Ref VLSDate
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  Subnet1Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref AWS::StackName, Public ] ]
        - Key: VLS
          Value: !Ref VLSDate
  RouteTableAPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref AWS::StackName, Public ] ]
        - Key: VLS
          Value: !Ref VLSDate
  RouteTableAssociation1Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1Public
      RouteTableId: !Ref RouteTableAPublic
  RouteTableAssociation2Public:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2Public
      RouteTableId: !Ref RouteTableAPublic
  RouteTablePublicAInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  EMRRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: VLS_EMR_ROLE
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: !Ref EMRPrincipal
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: VLS
          Value: !Ref VLSDate
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: VLS_EMR_EC2_ROLE
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: !Ref Ec2Principal
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: VLS
          Value: !Ref VLSDate
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: !Ref EC2Role
      Roles:
        - !Ref EC2Role
  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      LogUri: !Sub s3n://aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/
      ReleaseLabel: !Ref ReleaseLabel
      VisibleToAllUsers: true
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Pig
        - Name: Hue
        - Name: Ganglia
        - Name: Tez
        - Name: Spark
      ScaleDownBehavior: TERMINATE_AT_TASK_COMPLETION
      EbsRootVolumeSize: 10
      StepConcurrencyLevel: 1
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref EMRInstanceType
          Market: ON_DEMAND
          Name: EMRMaster
        CoreInstanceGroup:
          InstanceCount: 2
          InstanceType: !Ref EMRInstanceType
          Market: ON_DEMAND
          Name: EMRCore
        TerminationProtected: !Ref TerminationProtected
        Ec2SubnetId: !Ref Subnet1Public
        EmrManagedMasterSecurityGroup: !Ref MasterSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref CoreandTaskSecurityGroup
      Name: !Sub EMR-VLS-${VLSDate}
      JobFlowRole: !Ref EC2InstanceProfile
      ServiceRole: !Ref EMRRole
      VisibleToAllUsers: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: VLS
          Value: !Ref VLSDate

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EMR-MASTER-SG
      GroupDescription: Security group emr
      VpcId: !Ref VPC
  MasterSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: 0
      IpProtocol: tcp
      ToPort: 65535
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  MasterSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: 0
      IpProtocol: tcp
      ToPort: 65535
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: 0
      IpProtocol: udp
      ToPort: 65535
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  MasterSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: 0
      IpProtocol: udp
      ToPort: 65535
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  MasterSecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: -1
      IpProtocol: icmp
      ToPort: -1
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  MasterSecurityGroupIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      FromPort: -1
      IpProtocol: icmp
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  CoreandTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EMR-CORE-SG
      GroupDescription: Security group emr
      VpcId: !Ref VPC
  CoreandTaskSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: 0
      IpProtocol: tcp
      ToPort: 65535
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  CoreandTaskSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: 0
      IpProtocol: tcp
      ToPort: 65535
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  CoreandTaskSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: 0
      IpProtocol: udp
      ToPort: 65535
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  CoreandTaskSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: 0
      IpProtocol: udp
      ToPort: 65535
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  CoreandTaskSecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: -1
      IpProtocol: icmp
      ToPort: -1
      SourceSecurityGroupId: !Ref CoreandTaskSecurityGroup
  CoreandTaskSecurityGroupIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CoreandTaskSecurityGroup
      FromPort: -1
      IpProtocol: icmp
      ToPort: -1
      SourceSecurityGroupId: !Ref MasterSecurityGroup

  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  # EC2InstanceProfile2:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #     - !Ref SSMIAMRole
  Subnet2Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref AWS::StackName, Public ] ]
        - Key: VLS
          Value: !Ref VLSDate
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      #SecurityGroups:
      #- !Ref InstanceSecurityGroup
      ImageId: !Ref LatestAMIId
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref Subnet2Public
      Tags:
        - Key: Name
          Value: !Ref EC2Name
        - Key: VLS
          Value: !Ref VLSDate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
          Install:
            commands:
              yum: "sudo yum install python3"
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  NewVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 100
      AvailabilityZone: !GetAtt Ec2Instance.AvailabilityZone
  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref Ec2Instance
      VolumeId: !Ref NewVolume
      Device: /dev/sdh

Outputs:
  ClusterId:
    Description: "The ID of the EMR Cluster"
    Value:
      Ref: EMRCluster
  MasterPublicDNS:
    Description: "MasterPublicDNS/IP-address of EMR cluster MasterNode"
    Value: !GetAtt
      - EMRCluster
      - MasterPublicDNS
  EC2PublicDNS:
    Description: "PublicDNS/IP-address of EC2 Instance"
    Value: !GetAtt
      - Ec2Instance
      - PublicDnsName
